z <- c(7921,5184,8836,4761)
(4761 - mean(z))/8836
round(((4761 - mean(z))/8836),2)
require(caret)
require(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class, ## the outcome data are needed
+ p = .75,      ## The percentage of data in the training set
+ list = FALSE)
require(caret)
require(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class, ## the outcome data are needed
+ p = .75,      ## The percentage of data in the training set
+ list = FALSE)
require(caret)
require(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class, p = .75, list = FALSE)
str(inTrain)
training <- Sonar[ inTrain,]
testing <- Sonar[-inTrain,]
nrow(training)
# [1] 157
nrow(testing)
plsFit <- train(Class ~ ., data = training, method = "pls",
preProc = c("center", "scale"))
plsFit <- train(Class ~ ., data = training, method = "pls",
preProc = c("center", "scale"))
require(pls)
plsFit <- train(Class ~ ., data = training, method = "pls",
preProc = c("center", "scale"))
plsFit <- train(Class ~ ., data = training, method = "pls",
tuneLength = 15, preProc = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
plsFit <- train(Class ~ ., data = training, method = "pls",
tuneLength = 15, trControl = ctrl, preProc = c("center", "scale"))
require(pls)
plsFit <- train(Class ~ ., data = training, method = "pls",
preProc = c("center", "scale"))
plsFit <- train(Class ~ ., data = training, method = "pls",
tuneLength = 15, preProc = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
plsFit <- train(Class ~ ., data = training, method = "pls",
tuneLength = 15, trControl = ctrl, preProc = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3,
classProbs = TRUE, summaryFunction = twoClassSummary)
plsFit <- train(Class ~ ., data = training, method = "pls",
tuneLength = 15, trControl = ctrl, metric = "ROC",
preProc = c("center", "scale"))
plsFit
plsClasses <- predict(plsFit, newdata = testing)
str(plsClasses)
plot(plsFit)
plsProbs <- predict(plsFit, newdata = testing, type = "prob")
head(plsProbs)
confusionMatrix(data = plsClasses, testing$Class)
require(caret)
require(mlbench)
data(Sonar)
set.seed(107)
require(caret)
require(caret)
install.packages('descr')
library(descr)
install.packages('mutagen')
install.packages('kernlab')
library(kernlab)
install.packages('kernlab')
q()
install.packages('kernlab')
library(kernlab)
library(kernlab)
install.packages('gbm')
q()
install.packages('survival')
library(survival)
install.packages('splines')
install.packages('parallel')
install.packages('gbm 2.1.1')
install.packages('plyr')
library(plyr)
q()
install.packages('ISLR')
library(ISLR)
install.packages('gridExtra')
library(gridExtra)
install.packages('labeling')
library(labeling)
install.packages('cut2')
library(cut2)
install.packages('Hmisc')
library(Hmisc)
library(Hmisc)
q()
install.packages('e1071')
library(e1071)
library(e1071)
install.packages('e1071')
install.packages('e1071')
library(e1071)
library(e1071)
install.packages('rattle')
library(rattle)
library(rattle)
library(rattle)
q()
install.packages('yaml')
library('yaml')
install.packages('htmltools')
library('htmltools')
install.packages('knitr')
library('knitr')
install.packag('curl')
install.package('curl')
install.packages('curl')
library('curl')
install.packages('RCurl')
library('RCurl')
library('RCurl')
q()
setwd("C:/Dev/Git/MachLearning_Prediction")
